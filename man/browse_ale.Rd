% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/browser.R
\name{browse_ale}
\alias{browse_ale}
\title{Interactively browse an \code{ale} object with a Shiny app}
\usage{
browse_ale(
  id,
  obj = NULL,
  obj_name = NULL,
  ale_dataset = NULL,
  ...,
  tabs = "all",
  height = 800,
  width = "100\%"
)
}
\arguments{
\item{id}{single character string. A required unique identifier to distinguish the
current module from any other modules in the same page or namespace. If two
instances of \code{browse_ale()} are called in the same page or namespace, they might
not work properly.}

\item{obj}{\code{ale_data} object. The \code{ale_data} object to browse. If NULL (default),
the app lets the user load a serialized object from the "Load" tab.}

\item{obj_name}{single character string. An optional label with which \code{obj} will
be named in the app.}

\item{ale_dataset}{dataframe. The dataset on which \code{obj} was produced. If the
full dataset is unavailable, at least a random sample of the dataset should be
provided. When provided, this optional argument is used for some visualizations,
particularly for rug plots.}

\item{...}{not used. Tabs to display in the browser. Possible values from
c('all', 'plots', 'stats', 'data', 'load'). If 'all' is included (default),
all tabs will #' be included regardless of the other options. Otherwise, only
the tabs explicitly listed are shown.}

\item{tabs}{character vector. Inserted to require explicit naming of subsequent arguments.}

\item{height, width}{single integer or character string. Desired height and width
of the application in the user's browser window. The browser might adjust the
actual values. These are expressed as CSS, with integer values defaulting in
pixels. These values are passed to the options list of \code{shiny::shinyApp()};
refer to its documentation for more details.}
}
\value{
This function returns a Shiny app that browses ale objects. It is designed such
that it can be either run standalone or embedded within Quarto or R Markdown
documents.
}
\description{
Interactively browse an \code{ale} object with a Shiny app.
}
\examples{
\dontrun{
# donttest on CRAN because examples are quite slow

# Sample 1000 rows from the ggplot2::diamonds dataset (for a simple example)
set.seed(0)
diamonds_sample <- ggplot2::diamonds[sample(nrow(ggplot2::diamonds), 1000), ]

# Create a GAM model with flexible curves to predict diamond price
# Smooth all numeric variables and include all other variables
gam_diamonds <- mgcv::gam(
  price ~ s(carat) + s(depth) + s(table) + s(x) + s(y) + s(z) +
    cut + color + clarity,
  data = diamonds_sample
)
summary(gam_diamonds)

# Simple ALE without bootstrapping
ale_gam_diamonds <- ale(
  diamonds_sample, gam_diamonds,
  parallel = 2  # CRAN limit (delete this line on your own computer)
)

browse_ale(
  'unique_id',
  obj = ale_gam_diamonds,
  obj_name = 'ALE for GAM on diamonds dataset',
  ale_dataset = diamonds_sample
)

}





}
